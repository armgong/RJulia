% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rjulia.R
\name{julia_BigintToDouble}
\alias{julia_BigintToDouble}
\title{Option for Converting Julia Types Uint32,  Int64,  and Uint64 to R}
\usage{
julia_BigintToDouble(mode = FALSE)
}
\arguments{
\item{mode}{single logical, indicates how to convert Uint32,
Int64 and Uint64 julia objects to \R. If \code{mode} is true, convert to
double. If it is false, the julia object will be converted to
integer or double depending on the object's value. If all values of
the object stay within the range of signed int32, then the object will be
converted to integer, otherwise to double. The default \code{mode}
is \code{FALSE}.}
}
\description{
We need to pay attention on the julia types \code{UInt32}, \code{Int64}
  and \code{UInt64} are mapped to \R. As the \code{\link{integer}} type
  in \R is (only) signed 32 bit, the above three types contain values out
  of \R's integer range.
  \code{julia_BigintToDouble()} allows to determine what happens when
  such variables are converted to \R objects.
}
\examples{
julia_BigintToDouble(TRUE)
y <- j2r("jvar=convert(Uint64,  12)")
jDo("println(typeof(jvar))") # UInt64
str(y) # num 12 -- double ("TRUE" above)

julia_BigintToDouble(FALSE)
y <- j2r("jvar=convert(Uint64,  31)")
jDo("println(typeof(jvar))") # UInt64
str(y) # int 31 -- integer,  not double  ("FALSE" above)
}
\seealso{
Other rjulia: \code{\link{j2r}}, \code{\link{jDo}},
  \code{\link{jdfinited}}, \code{\link{jloaddf}},
  \code{\link{julia_init}}, \code{\link{r2j}},
  \code{\link{rjulia package}}
}
